<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:security="http://www.springframework.org/schema/security"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/security
        http://www.springframework.org/schema/security/spring-security.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!-- 配置不过滤的资源（静态资源及登录相关） -->
    <security:http security="none" pattern="/login.html" />
    <security:http security="none" pattern="/css/**" />
    <security:http security="none" pattern="/img/**" />
    <security:http security="none" pattern="/pages/**" />
    <security:http security="none" pattern="/plugins/**" />

    <!-- auto-config="true" 默认使用框架提供的简洁的登陆页面
    use-expressions="false" 是否使用SPEL表达式，(这里就不使用，可以问度娘去学习)
     -->
    <security:http auto-config="true" use-expressions="true">

        <!--
        pattern 拦截的规则，支持部分正则，
        access  访问系统的用户所需要的角色列表，满足一个即可 -->
        <!--<security:intercept-url pattern="/**" access="@permissionService.hasPermission(request,authentication)" />-->
        <security:intercept-url pattern="/**" access="hasAnyRole('ROLE_USER', 'ROLE_ADMIN')" />

        <!-- 自定义登陆页面，
        login-page 登陆页面
        login-processing-url : 发送登陆请求数据的url
        authentication-failure-url 用户权限校验失败后后才会跳转到这个页面，
            如果数据库中没有这个用户则不会跳转到这个页面。
        default-target-url 登陆成功后跳转的页面。
        注：登陆页面参数建议固定：用户名:username; 密码:password; action:login -->
        <security:form-login login-page="/login.html"
                             login-processing-url="/login"
                             username-parameter="username"
                             password-parameter="password"
                             authentication-failure-url="/login.html"
                             default-target-url="/index.html"
                             authentication-success-forward-url="/index.html"/>

        <!-- 登出，默认底层会自动使用 session技术保存用户状态！
        invalidate-session 是否删除session
        logout-url：登出处理链接,发送这个请求，当前用户就退出了登陆
        logout-success-url：登出成功页面 -->
        <security:logout invalidate-session="true" logout-url="/logout"
                         logout-success-url="/login.html" />

        <!-- 关闭CSRF 跨越请求,默认是开启的 -->
        <security:csrf disabled="true" />
    </security:http>

    <!-- 配置认证信息来源，从数据库中获取；
         默认用户名名称为 username；密码默认名称为 password ;
         如果密码是没有经过加密处理的，需要在
         密码字符前面加上 {noop} 前缀让框架识别为非加密的密码！
         user-service-ref 配置的为 ioc 容器中 service层对应查询封装
         用户信息的的id!需要开发者实现！ -->
    <security:authentication-manager>
        <security:authentication-provider user-service-ref="userService">
            <!-- 配置加密的方式: 后续介绍！
            每次加密的
            -->
            <security:password-encoder ref="passwordEncoder"/>

        </security:authentication-provider>
    </security:authentication-manager>

    <!-- 配置加密类 -->
    <bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>

    <!-- 服务器端方法级权限控制 -->
    <!--<security:global-method-security jsr250-annotations="enabled"/>-->
    <!--<security:global-method-security jsr250-annotations="enabled" secured-annotations="enabled" pre-post-annotations="enabled"/>-->
    <!--<bean id="webSecurityExpressionHandler" class="org.springframework.security.web.access.expression.DefaultWebSecurityExpressionHandler"/>-->

</beans>